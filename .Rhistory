summary_df
hotels_raw %>% group_by(accommodation_type,misrating) %>% summarise(mean(price))
styler:::style_selection()
# Finding a good deal among hotels
# load hotels_raw
hotels_raw <- read_csv("input/hotelbookingdata-vienna.csv")
# transform values of some variables (through splitting) into valid values
hotels_raw <- hotels_raw |>
separate(center1distance, c("distance", NA), sep = " ") |>
separate(center2distance, c("distance_alter", NA), sep = " ") |>
separate(accommodationtype, c(NA, "accommodation_type"), sep = "@") |>
separate(price_night, c(NA, NA, "nnight", NA), sep = " ") |>
separate(guestreviewsrating, c("rating", NA), sep = " ")
head(hotels_raw)
# check: frequency table of all values incl. missing values
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
tab_rating_reviewcount <- hotels_raw |>
group_by(rating_reviewcount) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating_reviewcount
hotels_raw <- hotels_raw |>
mutate(rating_count = as.numeric(rating_reviewcount))
describe(hotels_raw$rating_count)
# rename variables
hotels_raw <- hotels_raw |> rename(
ratingta = rating2_ta,
ratingta_count = rating2_ta_reviewcount,
country = addresscountryname,
city = s_city, stars = starrating
)
# check: key variables
tab_stars <- hotels_raw |>
group_by(stars) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_stars
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
# look for perfect duplicates
hotels_raw <- hotels_raw |>
arrange(hotel_id)
hotels_raw |>
group_by(hotel_id) |>
filter(n() > 1) |>
select(c(hotel_id, accommodation_type, price, distance, stars, rating, rating_count))
hotels_raw <- hotels_raw |>
distinct()
# handling missing values in text
summary(hotels_raw)
summary_df <- t(stat.desc(hotels_raw))
summary_df
hotels_raw <- hotels_raw |>
mutate(misrating = ifelse(is.na(rating), 1, 0))
table(hotels_raw$misrating)
addmargins(table(hotels_raw$accommodation_type, hotels_raw$misrating))
hotels_raw |>
group_by(accommodation_type, misrating) |>
summarise(mean(price))
hotels_raw |>
filter((misrating == 1) & (accommodation_type == "Hotel")) |>
select(hotel_id, accommodation_type, price, distance, stars, rating, rating_count) |>
slice(1)
# hotels_clean <- read_csv("input/hotels-vienna.csv")
# football <- read_csv("input/football_managers.csv")
# immu <- read_csv("input/worldbank-immunization-continents.csv")
hotels_raw
hotels_clean <- read_csv("input/hotels-vienna.csv")
hotel_clean
# Finding a good deal among hotels
# load hotels_raw
hotels_raw <- read_csv("input/hotelbookingdata-vienna.csv")
hotels_clean <- read_csv("input/hotels-vienna.csv")
# transform values of some variables (through splitting) into valid values
hotels_raw <- hotels_raw |>
separate(center1distance, c("distance", NA), sep = " ") |>
separate(center2distance, c("distance_alter", NA), sep = " ") |>
separate(accommodationtype, c(NA, "accommodation_type"), sep = "@") |>
separate(price_night, c(NA, NA, "nnight", NA), sep = " ") |>
separate(guestreviewsrating, c("rating", NA), sep = " ")
head(hotels_raw)
# check: frequency table of all values incl. missing values
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
tab_rating_reviewcount <- hotels_raw |>
group_by(rating_reviewcount) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating_reviewcount
hotels_raw <- hotels_raw |>
mutate(rating_count = as.numeric(rating_reviewcount))
describe(hotels_raw$rating_count)
# rename variables
hotels_raw <- hotels_raw |> rename(
ratingta = rating2_ta,
ratingta_count = rating2_ta_reviewcount,
country = addresscountryname,
city = s_city, stars = starrating
)
# check: key variables
tab_stars <- hotels_raw |>
group_by(stars) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_stars
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
# look for perfect duplicates
hotels_raw <- hotels_raw |>
arrange(hotel_id)
hotels_raw |>
group_by(hotel_id) |>
filter(n() > 1) |>
select(c(hotel_id, accommodation_type, price, distance, stars, rating, rating_count))
hotels_raw <- hotels_raw |>
distinct()
# handling missing values in text
summary(hotels_raw)
summary_df <- t(stat.desc(hotels_raw))
summary_df
hotels_raw <- hotels_raw |>
mutate(misrating = ifelse(is.na(rating), 1, 0))
table(hotels_raw$misrating)
addmargins(table(hotels_raw$accommodation_type, hotels_raw$misrating))
hotels_raw |>
group_by(accommodation_type, misrating) |>
summarise(mean(price))
hotels_raw |>
filter((misrating == 1) & (accommodation_type == "Hotel")) |>
select(hotel_id, accommodation_type, price, distance, stars, rating, rating_count) |>
slice(1)
hotels_raw
hotel_clean
hotels_raw
hotels_clean
hotels_raw
hotels_clean
hotels_clean
hotels_raw
hotels_clean
hotels_raw
hotels_raw
hotels_clean
#**********************************************
#     Finding a good deal among hotels
#**********************************************
# load hotels_raw
hotels_raw <- read_csv("input/hotelbookingdata-vienna.csv")
# load hotels_clean
hotels_clean <- read_csv("input/hotels-vienna.csv")
# transform values of some variables (through splitting) into valid values
hotels_raw <- hotels_raw |>
separate(center1distance, c("distance", NA), sep = " ") |>
separate(center2distance, c("distance_alter", NA), sep = " ") |>
separate(accommodationtype, c(NA, "accommodation_type"), sep = "@") |>
separate(price_night, c(NA, NA, "nnight", NA), sep = " ") |>
separate(guestreviewsrating, c("rating", NA), sep = " ")
head(hotels_raw)
# check: frequency table of all values incl. missing values
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
tab_rating_reviewcount <- hotels_raw |>
group_by(rating_reviewcount) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating_reviewcount
hotels_raw <- hotels_raw |>
mutate(rating_count = as.numeric(rating_reviewcount))
describe(hotels_raw$rating_count)
# rename variables
hotels_raw <- hotels_raw |> rename(
ratingta = rating2_ta,
ratingta_count = rating2_ta_reviewcount,
country = addresscountryname,
city = s_city, stars = starrating
)
# check: key variables
tab_stars <- hotels_raw |>
group_by(stars) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_stars
tab_rating <- hotels_raw |>
group_by(rating) |>
summarise(n = n()) |>
mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
# look for perfect duplicates
hotels_raw <- hotels_raw |>
arrange(hotel_id)
hotels_raw |>
group_by(hotel_id) |>
filter(n() > 1) |>
select(c(hotel_id, accommodation_type, price, distance, stars, rating, rating_count))
hotels_raw <- hotels_raw |>
distinct()
# handling missing values in text
summary(hotels_raw)
summary_df <- t(stat.desc(hotels_raw))
summary_df
hotels_raw <- hotels_raw |>
mutate(misrating = ifelse(is.na(rating), 1, 0))
table(hotels_raw$misrating)
addmargins(table(hotels_raw$accommodation_type, hotels_raw$misrating))
hotels_raw |>
group_by(accommodation_type, misrating) |>
summarise(mean(price))
hotels_raw |>
filter((misrating == 1) & (accommodation_type == "Hotel")) |>
select(hotel_id, accommodation_type, price, distance, stars, rating, rating_count) |>
slice(1)
hotels_raw
hotels_clean
# football <- read_csv("input/football_managers.csv")
# immu <- read_csv("input/worldbank-immunization-continents.csv")
# load data
games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
# load data
games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
head(games)
head(managers)
glimpse(games)
glimpse(managers)
glimpse(games)
# load data
games <- read_csv("input/epl-teams-games.csv")
games <- read_csv("input/epl_games.csv")
managers <- read_csv("input/football_managers.csv")
head(games)
glimpse(games)
glimpse(managers)
head(managers)
# load data
games <- read_csv("input/epl_games.csv")
team-games <- read_csv("input/epl-teams-games.csv")
# load data
games <- read_csv("input/epl_games.csv")
team_games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
head(games)
glimpse(games)
glimpse(managers)
head(managers)
glimpse(games)
glimpse(team_games)
glimpse(managers)
managers <- read_csv("input/football_managers_workfile.csv")
glimpse(merged)
merged <- read_csv("input/football_managers_workfile.csv")
glimpse(merged)
Hmisc::describe(football_managers_merged$manager_id)
Hmisc::describe(merged$manager_id)
Hmisc::describe(hotels_raw$rating_count)
# transform values of some variables (through splitting) into valid values
hotels_raw <- hotels_raw |>
tidyr::separate(center1distance, c("distance", NA), sep = " ") |>
tidyr::separate(center2distance, c("distance_alter", NA), sep = " ") |>
tidyr::separate(accommodationtype, c(NA, "accommodation_type"), sep = "@") |>
tidyr::separate(price_night, c(NA, NA, "nnight", NA), sep = " ") |>
tidyr::separate(guestreviewsrating, c("rating", NA), sep = " ")
# load hotels_raw
hotels_raw <- read_csv("input/hotelbookingdata-vienna.csv")
# load hotels_clean
hotels_clean <- read_csv("input/hotels-vienna.csv")
# transform values of some variables (through splitting) into valid values
hotels_raw <- hotels_raw |>
tidyr::separate(center1distance, c("distance", NA), sep = " ") |>
tidyr::separate(center2distance, c("distance_alter", NA), sep = " ") |>
tidyr::separate(accommodationtype, c(NA, "accommodation_type"), sep = "@") |>
tidyr::separate(price_night, c(NA, NA, "nnight", NA), sep = " ") |>
tidyr::separate(guestreviewsrating, c("rating", NA), sep = " ")
head(hotels_raw)
# check: frequency table of all values incl. missing values
tab_rating <- hotels_raw |>
dplyr::group_by(rating) |>
dplyr::summarise(n = n()) |>
dplyr::mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
tab_rating_reviewcount <- hotels_raw |>
dplyr::group_by(rating_reviewcount) |>
dplyr::summarise(n = n()) |>
dplyr::mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating_reviewcount
hotels_raw <- hotels_raw |>
dplyr::mutate(rating_count = as.numeric(rating_reviewcount))
Hmisc::describe(hotels_raw$rating_count)
# rename variables
hotels_raw <- hotels_raw |>
dplyr::rename(
ratingta = rating2_ta,
ratingta_count = rating2_ta_reviewcount,
country = addresscountryname,
city = s_city, stars = starrating
)
# check: key variables
tab_stars <- hotels_raw |>
dplyr::group_by(stars) |>
dplyr::summarise(n = n()) |>
dplyr::mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_stars
tab_rating <- hotels_raw |>
dplyr::group_by(rating) |>
dplyr::summarise(n = n()) |>
dplyr::mutate(
percent = round((n / sum(n)), 3),
cumpercent = round(cumsum(freq = n / sum(n)), 3)
)
tab_rating
# look for perfect duplicates
hotels_raw <- hotels_raw |>
arrange(hotel_id)
hotels_raw |>
dplyr::group_by(hotel_id) |>
dplyr::filter(n() > 1) |>
dplyr::select(c(hotel_id, accommodation_type, price, distance, stars, rating, rating_count))
hotels_raw <- hotels_raw |>
dplyr::distinct()
# handling missing values in text
summary(hotels_raw)
summary_df <- t(stat.desc(hotels_raw))
summary_df
hotels_raw <- hotels_raw |>
dplyr::mutate(misrating = ifelse(is.na(rating), 1, 0))
table(hotels_raw$misrating)
addmargins(table(hotels_raw$accommodation_type, hotels_raw$misrating))
hotels_raw |>
dplyr::group_by(accommodation_type, misrating) |>
dplyr::summarise(mean(price))
hotels_raw |>
dplyr::filter((misrating == 1) & (accommodation_type == "Hotel")) |>
dplyr::select(hotel_id, accommodation_type, price, distance, stars, rating, rating_count) |>
dplyr::slice(1)
hotels_raw
hotels_clean
# load data
games <- read_csv("input/epl_games.csv")
team_games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
merged <- read_csv("input/football_managers_workfile.csv")
dplyr::glimpse(games)
dplyr::glimpse(team_games)
dplyr::glimpse(managers)
dplyr::glimpse(merged)
Hmisc::describe(merged$manager_id)
Hmisc::describe(merged$manager_id)
styler:::style_selection()
games <- epl_games %>%
dplyr::arrange(., team_home)
games <- games %>%
dplyr::arrange(., team_home)
games
# look at basic data
games <- games %>%
dplyr::arrange(., team_away)
games
games <- games %>%
dplyr::arrange(., team_home)
games
games <- games %>%
arrange(., season, team_home)
epl_games
games <- games %>%
arrange(., season, team_home)
games
games <- games %>%
filter(season == 2016)
games
games <- games %>%
dplyr::arrange(., season, team_home)
games
team_games <- team_games |>
arrange(., team)
team_games <- read_csv("input/epl-teams-games.csv")
team_games <- team_games |>
arrange(., team)
# at team-game level
team_games <- team_games |>
dplyr::arrange(., team)
team_games <- read_csv("input/epl-teams-games.csv")
dplyr::glimpse(team_games)
team_games <- team_games |>
arrange(., season, team)
team_games <- team_games |>
filter(season == 2016) |>
arrange(., date)
team_games <- team_games |>
dplyr::arrange(., team)
# at team-game level
team_games <- team_games |>
dplyr::arrange(.,team)
Hmisc::describe(merged$manager_id)
team_games <- team_games |>
dplyr::filter(season == 2016) |>
dplyr::arrange(., date)
games <- read_csv("input/epl_games.csv")
team_games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
merged <- read_csv("input/football_managers_workfile.csv")
games <- games |>
dplyr::arrange(., team_home)
games <- games %>%
dplyr::arrange(., team_home)
games
games <- games |>
dplyr::arrange(., season, team_home)
games <- games |>
arrange(., team_home)
games <- games |>
dplyr::arrange(., team_home)
games <- games |>
dplyr::arrange(games, team_home)
games
games <- games |>
dplyr::arrange(team_home)
games
games <- games |>
dplyr::arrange(season, team_home)
games
Hmisc::describe(merged$manager_id)
# load data
games <- read_csv("input/epl_games.csv")
team_games <- read_csv("input/epl-teams-games.csv")
managers <- read_csv("input/football_managers.csv")
merged <- read_csv("input/football_managers_workfile.csv")
dplyr::glimpse(games)
dplyr::glimpse(team_games)
dplyr::glimpse(managers)
dplyr::glimpse(merged)
# look at basic data
games <- games |>
dplyr::arrange(team_home)
games
games <- games |>
dplyr::arrange(season, team_home)
games
games <- games |>
dplyr::filter(season == 2016)
games
# at team-game level
team_games <- team_games |>
dplyr::arrange(team)
team_games
team_games <- team_games |>
dplyr::arrange(season, team)
team_games <- team_games |>
dplyr::filter(season == 2016) |>
dplyr::arrange(date)
team_games
Hmisc::describe(merged$manager_id)
