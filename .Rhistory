theme_bg()
p1|p2
# filtering 3-4 stars, without 1000 euro extreme value
vienna_hotels <- vienna |>
dplyr::filter(accommodation_type == "Hotel") |>
dplyr::filter(stars >= 3 & stars <= 4) |>
dplyr::filter(!is.na(stars)) |>
dplyr::filter(price <= 1000)
table(vienna_hotels$city)
table(vienna_hotels$stars)
# plotting hotel price (different bindwidth)
p3 <- ggplot(data = vienna_hotels, aes(x = price)) +
geom_histogram_da(type = "frequency", binwidth = 10) +
labs(x = "Price (US dollars)", y = "Frequency") +
expand_limits(x = 0.01, y = 0.01) +
coord_cartesian(clip = "off") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 50)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 40), breaks = seq(0, 40, by = 5)) +
theme_bg()
p4 <- ggplot(data = vienna_hotels, aes(x = price)) +
geom_histogram_da(type = "frequency", binwidth = 40) +
labs(x = "Price (US dollars)", y = "Frequency") +
expand_limits(x = 0.01, y = 0.01) +
coord_cartesian(clip = "off") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 50)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 40), breaks = seq(0, 40, by = 5)) +
theme_bg()
p5 <- ggplot(data = vienna_hotels, aes(x = price)) +
geom_histogram_da(type = "frequency", binwidth = 80) +
labs(x = "Price (US dollars)", y = "Frequency") +
expand_limits(x = 0.01, y = 0.01) +
coord_cartesian(clip = "off") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 50)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 40), breaks = seq(0, 40, by = 5)) +
theme_bg()
p6 <- ggplot(data = vienna_hotels, aes(x = price)) +
geom_histogram_da(type = "frequency", binwidth = 20) +
labs(x = "Price (US dollars)", y = "Frequency") +
expand_limits(x = 0.01, y = 0.01) +
coord_cartesian(clip = "off") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 50)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 40), breaks = seq(0, 40, by = 5)) +
theme_bg()
(p3 | p4 | p5) / p6
# plotting distance
p7 <- ggplot(data = vienna_hotels, aes(x = distance)) +
geom_histogram_da(type = "frequency", binwidth = 0.5) +
labs(x = "Distance to city center (miles)", y = "Frequency") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 14), breaks = seq(0, 14, by = 2)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 61), breaks = seq(0, 60, by = 10)) +
geom_segment(aes(x = 8.2, y = 0, xend = 8.2, yend = 60), color = color[2], size = 1) +
# geom_segment(aes(x = 10, y = 40, xend = 8.4, yend = 40), arrow = arrow(length = unit(0.2, "cm")))+
annotate("text", x = 11, y = 29, label = "Too far out", size = 2) +
annotate("rect", xmin = 8.2, xmax = 14, ymin = 0, ymax = 60, fill = color[4], alpha = 0.1) +
theme_bg()
p7
# looking at the actual place of hotels (included outside the city of Vienna)
table(vienna_hotels$city_actual)
# filtering 3-4 stars, less than 8miles from center, without 1000 euro extreme value
vienna_hotels <- vienna |>
dplyr::filter(accommodation_type == "Hotel") |>
dplyr::filter(stars >= 3 & stars <= 4) |>
dplyr::filter(!is.na(stars)) |>
dplyr::filter(price <= 1000) |>
dplyr::filter(city_actual == "Vienna")
# CASE STUDY: Comparing Hotel Prices in Europe: Vienna vs London
# load data
hotels_europe_price <- read_csv("input/hotels-europe_price.csv")
hotels_europe_features <- read_csv("input/hotels-europe_features.csv")
# creating a working data table for analysis
hotels_europe <- dplyr::left_join(hotels_europe_price, hotels_europe_features, by = "hotel_id")
# filtering for same Vienna data we used + London same date
hotels_europe_london_viena <- hotels_europe |>
dplyr::filter(year == 2017 & month == 11 & weekend == 0) |>
dplyr::filter(city %in% c("Vienna", "London")) |>
dplyr::filter(accommodation_type == "Hotel") |>
dplyr::filter(stars >= 3 & stars <= 4) |>
dplyr::filter(!is.na(stars)) |>
dplyr::filter(city_actual %in% c("Vienna", "London")) |>
dplyr::filter(price <= 600)
# looking at the mean price for both cities
hotels_europe_london_viena |>
dplyr::group_by(city) |>
dplyr::summarise(mean_price = mean(price), max = max(price), n = n())
# plotting the distribution of hotel price
p1 <- ggplot(data = filter(hotels_europe_london_viena, city == "Vienna"), aes(x = price)) +
geom_histogram_da(type = "percent", binwidth = 20) +
labs(x = "Price (US dollars)", y = "Percent", title = "Vienna") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 100)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.1), labels = scales::percent_format()) +
theme_bg()
p2 <- ggplot(data = filter(hotels_europe_london_viena, city == "London"), aes(x = price)) +
geom_histogram_da(type = "percent", binwidth = 20) +
labs(x = "Price (US dollars)", y = "Percent", title = "London") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 100)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.1), labels = scales::percent_format()) +
theme_bg()
(p1 | p2)
# plotting same data using density plot
p3 <- ggplot(data = hotels_europe_london_viena, aes(x = price, y = stat(density), color = city)) +
geom_line(stat = "density", show.legend = F, na.rm = TRUE) +
labs(x = "Price (US dollars)", y = "Density", color = "") +
scale_color_manual(
name = "",
values = c(color[2], color[1]),
labels = c("London", "Vienna")
) +
scale_y_continuous(expand = c(0.0, 0.0), limits = c(0, 0.015), breaks = seq(0, 0.015, by = 0.003)) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 500), breaks = seq(0, 500, by = 100)) +
geom_text(aes(x = 340, y = 0.0026, label = "London"), color = color[2], size = 2.5) +
geom_text(aes(x = 170, y = 0.008, label = "Vienna"), color = color[1], size = 2.5) +
theme_bg()
p3
# summarizing all statistics in one table
hotels_europe_london_viena_tab <- hotels_europe_london_viena |>
dplyr::group_by(city) |>
dplyr::summarise(
n = length(price), mean = mean(price), median = median(price), min = min(price), max = max(price),
sd = sd(price), skew = ((mean(price) - median(price)) / sd(price))
)
hotels_europe_london_viena_tab
# CASE STUDY: Measuring Home Team Advantage in Football
# load data
games <- read_csv("input/epl_games.csv")
# looking at 2016/17 season only
games <- subset(games, season == 2016)
# adding a goal difference variable
games <- games |>
dplyr::mutate(home_goaladv = goals_home - goals_away)
# summary statistics
summary(games$home_goaladv)
psych::describe(games$home_goaladv)
# plotting the distribution of the goal difference variable
p1 <- ggplot(data = games, aes(x = home_goaladv, y = (..count..) / sum(..count..))) +
geom_histogram(
color = color.outline, fill = theme_colors[1],
size = 0.2, alpha = 0.8, show.legend = F, na.rm = TRUE,
binwidth = 1
) +
geom_text(stat = "count", aes(label = round((..count..) / sum(..count..) * 100, 1)), hjust = 0.5, vjust = -0.5, size = 2) +
labs(x = "Goal difference", y = "Share of games (percent)") +
scale_x_continuous(expand = c(0.05, 0.05), limits = c(-6, 6), breaks = seq(-6, 6, by = 1)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.25), breaks = seq(0, 0.25, by = 0.05), labels = scales::percent_format(accuracy = 5L)) +
theme_bg()
p1
reticulate::repl_python()
# CASE STUDY: Distributions of Body Height and Income
# load data
hrs <- read_csv("input/hrs_height_income.csv")
# parsing height var as numeric
hrs$height <- as.numeric(as.character(hrs$height))
# looking at the overall height distribution
Hmisc::describe(hrs$height)
# filtering height of women age 55-59
filtered_women_height <- hrs |>
dplyr::filter(age >= 55 & age < 60 & female == 1 & height > 1.3 & height < 2.1)
Hmisc::describe(filtered_women_height$height)
# plotting women height
p1 <- ggplot(filtered_women_height, aes(x = height)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.025, boundary = min(filtered_women_height$height),
fill = color[1], color = color.outline, alpha = 0.8, closed = "left"
) +
stat_function(
fun = dnorm, colour = color[2],
args = with(filtered_women_height, c(mean = mean(height), sd = sd(height)))
) +
scale_y_continuous("Density",
position = "right", expand = c(0, 0), limits = c(0, 6),
sec.axis = sec_axis(~ . * 0.025, name = "Percent", breaks = seq(0, 0.15, by = 0.025), labels = percent_format(accuracy = 0.1))
) +
theme_bg() +
xlab("Height (meters)")
p1
# filtering income of women age 55-69
filtered_women_income <-  hrs  |>
dplyr::filter(age >= 55 & age < 60 & female == 1 & hhincome > 1 & hhincome < 1000)
Hmisc::describe(filtered_women_income$hhincome)
# plotting income histogram
p2 <- ggplot(filtered_women_income, aes(x = hhincome)) +
geom_histogram(aes(y = (..count..) / sum(..count..)),
binwidth = 20, boundary = 0, closed = "left",
fill = color[1], color = color.outline, alpha = 0.8
) +
ylab("Percent") +
xlab("Household income (thousand USD)") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 1000), breaks = seq(0, 1000, by = 100)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p2
# log of household income
filtered_women_income <- filtered_women_income |>
dplyr::mutate(lnincome = log(hhincome))
# plotting log of household income
p3 <- ggplot(filtered_women_income, aes(x = lnincome)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.25, boundary = 0, closed = "left",
fill = color[1], color = color.outline, alpha = 0.8
) +
stat_function(
fun = dnorm, colour = color[2],
args = with(filtered_women_income, c(mean = mean(lnincome), sd = sd(lnincome)))
) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 8), breaks = seq(0, 8, by = 1)) +
scale_y_continuous("Density",
position = "right", expand = c(0, 0), limits = c(0, 0.4),
sec.axis = sec_axis(~ . * 0.25,
name = "Percent", breaks = seq(0, 0.1, by = 0.025),
labels = percent_format(accuracy = 0.1)
)
) +
theme_bg() +
ylab("Percent") +
xlab("ln(household income, thousand USD)")
p3
# lintr::lint("main.Rmd", linters =
#               lintr::with_defaults(
#                 commented_code_linter = NULL,
#                 trailing_whitespace_linter = NULL
#                 )
#             )
# if you have additional scripts and want them to be linted too, add them here
# lintr::lint("scripts/my_script.R")
# CASE STUDY: Management quality and firm size: describing patterns of association
# load data
wms <- read_csv("input/wms_da_textbook.csv")
glimpse(wms)
# sample selection
wms <- wms |>
dplyr::filter(country=="Mexico" & wave==2013 & emp_firm>=100  & emp_firm<=5000)
View(wms)
help("summary")
# Summary
summary(wms$emp_firm)
Hmisc::describe(df$emp_firm)
Hmisc::describe(wms$emp_firm)
summary(wms$emp_firm)
Hmisc::describe(wms$emp_firm)
styler:::style_selection()
styler:::style_selection()
summarise_all(tibble::lst(min, max, mean, median, sd, length))
wms |>
dplyr::select(management, emp_firm |>
summarise_all(tibble::lst(min, max, mean, median, sd, length))
wms
wms |>
dplyr::select(management, emp_firm |>
summarise_all(tibble::lst(min, max, mean, median, sd, length))
wms
summarise_all(tibble::lst(min, max, mean, median, sd, length))
help("summarise_all")
wms |>
dplyr::select(management, emp_firm |>
dplyr::summarise_all(tibble::lst(min, max, mean, median, sd, length))
wms |>
styler:::style_selection()
wms %>%
dplyr::select(management, emp_firm %>%
dplyr::summarise_all(tibble::lst(min, max, mean, median, sd, length))
styler:::style_selection()
wms %>%
dplyr::select(management, emp_firm) %>%
dplyr::summarise_all(tibble::lst(min, max, mean, median, sd, length))
wms  |>
dplyr::select(management, emp_firm)  |>
dplyr::summarise_all(tibble::lst(min, max, mean, median, sd, length))
styler:::style_selection()
p1 <- ggplot(data = wms, aes(x = management)) +
geom_histogram_da(binwidth = 0.25, type = "percent", boundary = 0) +
labs(x = "Management score", y = "Percent") +
# scale_x_continuous(breaks = seq(1, 5, by = 1)) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(1, 5)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.25), breaks = seq(0, 0.25, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p1
styler:::style_selection()
p2 <- ggplot(data = wms, aes(x = emp_firm)) +
geom_histogram_da(binwidth = 200, type = "percent") +
labs(x = "Firm size (employment)", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p2
# creating variable log
wms$lnemp = log(df$emp_firm)
# creating variable log
wms$lnemp = log(df$emp_firm)
# creating variable log
wms$lnemp = log(wms$emp_firm)
Hmisc::describe(wms$lnemp)
styler:::style_selection()
p3 <- ggplot(data = wms, aes(x = lnemp)) +
geom_histogram_da(binwidth = 0.25, type = "percent", boundary = 0) +
labs(x = "Firm size (ln(employment))", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(4, 9)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.2), breaks = seq(0, 0.2, by = 0.04), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p3
p3
# CASE STUDY: Management quality and firm size: describing patterns of association
# load data
wms <- read_csv("input/wms_da_textbook.csv")
# sample selection
wms <- wms |>
dplyr::filter(country=="Mexico" & wave==2013 & emp_firm>=100  & emp_firm<=5000)
# summary
summary(wms$emp_firm)
Hmisc::describe(wms$emp_firm)
wms  |>
dplyr::select(management, emp_firm)  |>
dplyr::summarise_all(tibble::lst(min, max, mean, median, sd, length))
# plotting distribution of the management score
p1 <- ggplot(data = wms, aes(x = management)) +
geom_histogram_da(binwidth = 0.25, type = "percent", boundary = 0) +
labs(x = "Management score", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(1, 5)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.25), breaks = seq(0, 0.25, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p1
# plotting the distribution of employees
p2 <- ggplot(data = wms, aes(x = emp_firm)) +
geom_histogram_da(binwidth = 200, type = "percent") +
labs(x = "Firm size (employment)", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 5000), breaks = seq(0, 5000, by = 1000)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p2
# creating variable log
wms$lnemp = log(wms$emp_firm)
Hmisc::describe(wms$lnemp)
# Histogram
p3 <- ggplot(data = wms, aes(x = lnemp)) +
geom_histogram_da(binwidth = 0.25, type = "percent", boundary = 0) +
labs(x = "Firm size (ln(employment))", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(4, 9)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.2), breaks = seq(0, 0.2, by = 0.04), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p3
# CASE STUDY: Distributions of Body Height and Income
# load data
hrs <- read_csv("input/hrs_height_income.csv")
# parsing height var as numeric
hrs$height <- as.numeric(as.character(hrs$height))
# looking at the overall height distribution
Hmisc::describe(hrs$height)
# filtering height of women age 55-59
filtered_women_height <- hrs |>
dplyr::filter(age >= 55 & age < 60 & female == 1 & height > 1.3 & height < 2.1)
Hmisc::describe(filtered_women_height$height)
# plotting women height
p1 <- ggplot(filtered_women_height, aes(x = height)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.025, boundary = min(filtered_women_height$height),
fill = color[1], color = color.outline, alpha = 0.8, closed = "left"
) +
stat_function(
fun = dnorm, colour = color[2],
args = with(filtered_women_height, c(mean = mean(height), sd = sd(height)))
) +
scale_y_continuous("Density",
position = "right", expand = c(0, 0), limits = c(0, 6),
sec.axis = sec_axis(~ . * 0.025, name = "Percent", breaks = seq(0, 0.15, by = 0.025), labels = percent_format(accuracy = 0.1))
) +
theme_bg() +
xlab("Height (meters)")
p1
# filtering income of women age 55-69
filtered_women_income <-  hrs  |>
dplyr::filter(age >= 55 & age < 60 & female == 1 & hhincome > 1 & hhincome < 1000)
Hmisc::describe(filtered_women_income$hhincome)
# plotting income histogram
p2 <- ggplot(filtered_women_income, aes(x = hhincome)) +
geom_histogram(aes(y = (..count..) / sum(..count..)),
binwidth = 20, boundary = 0, closed = "left",
fill = color[1], color = color.outline, alpha = 0.8
) +
ylab("Percent") +
xlab("Household income (thousand USD)") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 1000), breaks = seq(0, 1000, by = 100)) +
scale_y_continuous(expand = c(0.00, 0.00), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.05), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p2
# log of household income
filtered_women_income <- filtered_women_income |>
dplyr::mutate(lnincome = log(hhincome))
# plotting log of household income
p3 <- ggplot(filtered_women_income, aes(x = lnincome)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.25, boundary = 0, closed = "left",
fill = color[1], color = color.outline, alpha = 0.8
) +
stat_function(
fun = dnorm, colour = color[2],
args = with(filtered_women_income, c(mean = mean(lnincome), sd = sd(lnincome)))
) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 8), breaks = seq(0, 8, by = 1)) +
scale_y_continuous("Density",
position = "right", expand = c(0, 0), limits = c(0, 0.4),
sec.axis = sec_axis(~ . * 0.25,
name = "Percent", breaks = seq(0, 0.1, by = 0.025),
labels = percent_format(accuracy = 0.1)
)
) +
theme_bg() +
ylab("Percent") +
xlab("ln(household income, thousand USD)")
p3
styler:::style_selection()
wms$emp3bins <- ifelse(df$emp_firm < 200, 1,
ifelse(df$emp_firm >= 200 & df$emp_firm < 1000, 2,
ifelse(df$emp_firm >= 1000, 3, 100)
)
)
# generating employment bins
wms$emp3bins <- ifelse(wms$emp_firm < 200, 1,
ifelse(wms$emp_firm >= 200 & wms$emp_firm < 1000, 2,
ifelse(wms$emp_firm >= 1000, 3, 100)
)
)
Hmisc::describe(wms$emp3bins)
# converting created variable as factor
wms$emp3bins <- as.factor(wms$emp3bins)
Hmisc::describe(wms$emp3bins)
styler:::style_selection()
wms1 <- wms |>
dplyr::select(emp3bins, lean1) |>
dplyr::group_by(emp3bins, lean1) |>
dplyr::summarise(Count = n()) |>
dplyr::mutate(Percent = round(Count / sum(Count), digits = 5)) |>
ungroup()
wms_lean <- wms |>
dplyr::select(emp3bins, lean1) |>
dplyr::group_by(emp3bins, lean1) |>
dplyr::summarise(Count = n()) |>
dplyr::mutate(Percent = round(Count / sum(Count), digits = 5)) |>
ungroup()
wms_lean
styler:::style_selection()
p1 <- ggplot(data = wms_lean, aes(x = emp3bins, y = Percent, fill = factor(lean1, levels = rev(unique(lean1))))) +
geom_bar(stat = "identity", position = "fill", width = 0.6, color = "white", size = 0.5, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0, 1, by = 0.2), labels = scales::percent_format()) +
scale_x_discrete(labels = c("1" = "Small", "2" = "Medium", "3" = "Large")) +
scale_fill_manual(values = c(color[3], color[1], color[5], color[2], color[4]), name = NULL) +
# scale_fill_manual(values = viridis(5, begin=0, end=0.9), name = NULL) +
labs(x = "Firm size (employment), 3 bins", y = "Percent") +
theme_bg() +
theme(legend.position = "right")
p1
styler:::style_selection()
# creating new df for performance tracking
wms_per <- wms |>
dplyr::select(emp3bins, perf2) |>
dplyr::group_by(emp3bins, perf2) |>
dplyr::summarise(Count = n()) |>
dplyr::mutate(Percent = round(Count / sum(Count), digits = 5)) |>
dplyr::ungroup()
p2 <- ggplot(data = wms_per, aes(x = emp3bins, y = Percent, fill = factor(perf2, levels = rev(unique(perf2))))) +
geom_bar(stat = "identity", position = "fill", width = 0.6, color = "white", size = 0.5, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0, 1, by = 0.2), labels = scales::percent_format()) +
scale_x_discrete(labels = c("1" = "Small", "2" = "Medium", "3" = "Large")) +
scale_fill_manual(values = c(color[3], color[1], color[5], color[2], color[4]), name = NULL) +
labs(x = "Firm size (employment), 3 bins", y = "Percent") +
theme_bg() +
theme(legend.position = "right")
p2
# generating employment bins
wms$emp3bins <- ifelse(wms$emp_firm < 200, 1,
ifelse(wms$emp_firm >= 200 & wms$emp_firm < 1000, 2,
ifelse(wms$emp_firm >= 1000, 3, 100)
)
)
Hmisc::describe(wms$emp3bins)
# converting created variable as factor
wms$emp3bins <- as.factor(wms$emp3bins)
# creating new df for lean management
wms_lean <- wms |>
dplyr::select(emp3bins, lean1) |>
dplyr::group_by(emp3bins, lean1) |>
dplyr::summarise(Count = n()) |>
dplyr::mutate(Percent = round(Count / sum(Count), digits = 5)) |>
dplyr::ungroup() # use %>% ungroup() when do multiple times group_by
# plotting lean management
p1 <- ggplot(data = wms_lean, aes(x = emp3bins, y = Percent, fill = factor(lean1, levels = rev(unique(lean1))))) +
geom_bar(stat = "identity", position = "fill", width = 0.6, color = "white", size = 0.5, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0, 1, by = 0.2), labels = scales::percent_format()) +
scale_x_discrete(labels = c("1" = "Small", "2" = "Medium", "3" = "Large")) +
scale_fill_manual(values = c(color[3], color[1], color[5], color[2], color[4]), name = NULL) +
# scale_fill_manual(values = viridis(5, begin=0, end=0.9), name = NULL) +
labs(x = "Firm size (employment), 3 bins", y = "Percent") +
theme_bg() +
theme(legend.position = "right")
p1
# creating new df for performance tracking
wms_per <- wms |>
dplyr::select(emp3bins, perf2) |>
dplyr::group_by(emp3bins, perf2) |>
dplyr::summarise(Count = n()) |>
dplyr::mutate(Percent = round(Count / sum(Count), digits = 5)) |>
dplyr::ungroup()
# plotting performance tracking
p2 <- ggplot(data = wms_per, aes(x = emp3bins, y = Percent, fill = factor(perf2, levels = rev(unique(perf2))))) +
geom_bar(stat = "identity", position = "fill", width = 0.6, color = "white", size = 0.5, alpha = 0.8) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks = seq(0, 1, by = 0.2), labels = scales::percent_format()) +
scale_x_discrete(labels = c("1" = "Small", "2" = "Medium", "3" = "Large")) +
scale_fill_manual(values = c(color[3], color[1], color[5], color[2], color[4]), name = NULL) +
labs(x = "Firm size (employment), 3 bins", y = "Percent") +
theme_bg() +
theme(legend.position = "right")
p2
