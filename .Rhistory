expand_limits(y = 0.01) +
scale_color_viridis(discrete = TRUE, option = "D", begin = 0.3, end = 0.7) +
theme_bg()
p2
p1 | p2
### REGRESSION 2: 4 DISTANCE CATEGORIES
hotels <- hotels |> mutate(dist4 = 0.5 + 1 * as.numeric(hotels$distance >= 1) + 1 * as.numeric(hotels$distance >= 2) + 2.5 * as.numeric(hotels$distance >= 3))
dist4 <- hotels |>
group_by(dist4) |>
dplyr::summarize(Eprice_cat4 = mean(price))
hotels <- left_join(hotels, dist4)
hotels |>
group_by(dist4) |>
dplyr::summarize(
mean_dist = mean(distance),
sd_dist = sd(distance),
min_dist = min(distance),
max_dist = max(distance),
mean_price = mean(price),
sd_price = sd(price),
min_price = min(price),
max_price = max(price),
N = n()
)
# plotting the regression analysis (4 bins) with bin scatters
p3 <- ggplot(data = hotels) +
geom_point(aes(x = dist4, y = Eprice_cat4),
size = 2.5, color = color[1], fill = color[1], shape = 21, alpha = 0.4, na.rm = T
) +
geom_text(aes(x = dist4, y = Eprice_cat4, label = round(Eprice_cat4)), hjust = -0.6, vjust = 0, color = "black", size = 3) +
expand_limits(x = 0.01, y = 0.01) +
coord_cartesian(xlim = c(0, 7), ylim = c(0, 400)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = c(0, 1, 2, 3, 4, 5, 6, 7)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
theme_bg()
p3
p1 | p3
# scatterplot of the whole data set (207 observations)
p4 <- ggplot(data = hotels) +
geom_point(aes(x = distance, y = price), color = color[1], size = 2, shape = 16, alpha = 0.5, show.legend = F, na.rm = TRUE) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
theme_bg()
p4
# non-parametric regression with a step function (4 bins)
hotels <- hotels |> mutate(dist4_s = 1 * as.numeric(hotels$distance >= 1) + 1 * as.numeric(hotels$distance >= 2) + 1 * as.numeric(hotels$distance >= 3) + 1 * as.numeric(hotels$distance >= 4) + 1 * as.numeric(hotels$distance >= 5) + 1 * as.numeric(hotels$distance >= 6))
hotels$xend <- c(hotels$dist4_s + 1)
hotels$yend <- c(hotels$Eprice_cat4)
# plotting non-parametric regression including scatterplot (4 bins)
p5 <- p4 +
geom_segment(data = hotels, aes(x = dist4_s, y = yend, xend = xend, yend = yend), color = color[2], size = 0.7, na.rm = TRUE)
p5
### REGRESSION 3: 7 DISTANCE CATEGORIES
hotels <- hotels |> mutate(dist7_new = 0.5 + 1 * as.numeric(hotels$distance >= 1) + 1 * as.numeric(hotels$distance >= 2) + 1 * as.numeric(hotels$distance >= 3) + 1 * as.numeric(hotels$distance >= 4) + 1 * as.numeric(hotels$distance >= 5) + 1 * as.numeric(hotels$distance >= 6))
dist7_new <- hotels |>
group_by(dist7_new) |>
dplyr::summarize(Eprice_cat7_new = mean(price))
hotels <- left_join(hotels, dist7_new)
hotels |>
group_by(dist7_new) |>
dplyr::summarize(
mean_dist = mean(distance),
sd_dist = sd(distance),
min_dist = min(distance),
max_dist = max(distance),
mean_dist = mean(price),
sd_dist = sd(price),
min_dist = min(price),
max_dist = max(price),
N = n()
)
# non-parametric regression with a step function (7 bins)
hotels <- hotels %>% mutate(dist7_s = 1 * as.numeric(hotels$distance >= 1) + 1 * as.numeric(hotels$distance >= 2) + 1 * as.numeric(hotels$distance >= 3) + 1 * as.numeric(hotels$distance >= 4) + 1 * as.numeric(hotels$distance >= 5) + 1 * as.numeric(hotels$distance >= 6))
hotels$xend <- c(hotels$dist7_s + 1)
hotels$yend <- c(hotels$Eprice_cat7_new)
# plotting non-parametric regression including scatterplot (7 bins)
p6 <- p4 +
geom_segment(data = hotels, aes(x = dist7_s, y = yend, xend = xend, yend = yend), color = color[2], size = 0.7, na.rm = TRUE)
p6
p5 | p6
# LOWESS NONPARAMETRIC REGRESSION
p7 <- p4 +
geom_smooth(aes(x = distance, y = price), method = "loess", se = FALSE)
p7
# CASE STUDY: Finding a Good Deal among Hotels with Simple Regression
# load data
hotels <- read_csv("input/hotels-vienna.csv")
# Apply filters:  3-4 stars, Vienna actual, without extreme value
hotels <- hotels |>
filter(accommodation_type == "Hotel") |>
filter(city_actual == "Vienna") |>
filter(stars >= 3 & stars <= 4) |>
filter(!is.na(stars)) |>
filter(price <= 600)
# plotting scatterplot
p1 <- ggplot(data = hotels) +
geom_point(aes(x = distance, y = price), color = color[1], size = 2, shape = 16, alpha = 0.5, show.legend = F, na.rm = TRUE) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
theme_bg()
p1
# plotting linear regression + lines for averages
p2 <- p1 +
geom_smooth(aes(x = distance, y = price), method = "lm", se = FALSE) +
geom_vline(xintercept = mean(hotels$distance), color = color[3], lty = "dashed", size = 0.3) +
geom_hline(yintercept = mean(hotels$price), color = color[3], lty = "dashed", size = 0.3)
p2
# CASE STUDY: Finding a Good Deal among Hotels with Simple Regression
# load data
hotels <- read_csv("input/hotels-vienna.csv")
# Apply filters:  3-4 stars, Vienna actual, without extreme value
hotels <- hotels |>
filter(accommodation_type == "Hotel") |>
filter(city_actual == "Vienna") |>
filter(stars >= 3 & stars <= 4) |>
filter(!is.na(stars)) |>
filter(price <= 600)
# calculating predicted values and the residuals
regression <- lm(price ~ distance, data = hotels)
hotels$predprice <- predict(regression)
hotels$e <- resid(regression)
# values for annotation
xa<- 2.9
ya<- 208
ym<- 90.24
# plotting the regression line and the residual
p1 <- ggplot(data = hotels, aes(x = distance, y = price)) +
geom_point_da() +
geom_smooth_da(method = "lm") +
annotation_custom(grid.text("Residual", x = 0.48, y = 0.5, gp = gpar(color = "black", fontsize = 4, fontface = "bold"))) +
annotate("pointrange", x = xa, y = ya, ymin = ya, ymax = ya, color = color[3], size = 0.1) +
geom_errorbar(data = subset(hotels, hotels$distance == xa), aes(x = distance, ymin = ym, ymax = ya), width = 0.2, size = 0.2, color = color[1]) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
theme_bg()
p1
# plotting histogram of the residuals
p2 <- ggplot(data = hotels, aes(x = e)) +
geom_histogram(aes(y = (..count..) / sum(..count..)),
binwidth = 20, color = color.outline, fill = theme_colors[1],
size = 0.2, alpha = 0.8, show.legend = F, na.rm = TRUE, boundary = 1
) +
labs(x = "Residuals", y = "Percent") +
scale_x_continuous(limits = c(-100, 300), breaks = seq(-100, 300, by = 100)) +
scale_y_continuous(
expand = c(0.0, 0.0), limits = c(0, 0.3), breaks = seq(0, 0.3, by = 0.05),
labels = scales::percent_format(accuracy = 1)
) +
theme_bg()
p2
# calculating predicted values and the residuals
reg1 <- lm(price ~ distance, data = hotels)
summary(reg1)
# creating new variables
hotels$reg1_resid <- reg1$residuals
hotels$reg1_res <- ifelse(reg1$residuals >= 0, "overpriced", "underpriced")
hotels$reg1_res <- ifelse(hotels$reg1_resid %in% tail(sort(reg1$residuals, decreasing = TRUE), 5), "bottom5",
ifelse(hotels$reg1_resid %in% head(sort(reg1$residuals, decreasing = TRUE), 5), "top5", hotels$reg1_res)
)
# creating new data set
bestdeals <- hotels |>
arrange(e)
bestdeals
# plotting underpriced hotels
p3 <- ggplot(data = hotels, aes(x = distance, y = price)) +
geom_point(
data = filter(hotels, reg1_res == "overpriced"), aes(color = factor(reg1_res)),
size = 1.3, shape = 16, alpha = 0.6, show.legend = F
) +
geom_point(
data = filter(hotels, reg1_res == "underpriced"), aes(color = factor(reg1_res)),
size = 1.3, shape = 16, alpha = 0.6, show.legend = F
) +
geom_point(
data = filter(hotels, reg1_res == "bottom5"), aes(color = factor(reg1_res), fill = factor(reg1_res)),
size = 1.5, shape = 21, alpha = 0.8, show.legend = F
) +
geom_point(
data = filter(hotels, reg1_res == "top5"), aes(color = factor(reg1_res)),
size = 1.3, shape = 16, alpha = 0.6, show.legend = F
) +
geom_smooth_da(method = "lm", size = 1) +
coord_cartesian(xlim = c(0, 7), ylim = c(0, 400)) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
scale_color_manual(
name = "",
values = c(color[1], color[1], color[1], color[1])
) +
scale_fill_manual(name = "", values = c(color[4])) +
geom_segment(aes(x = 2, y = 25, xend = 1.15, yend = 50), arrow = arrow(length = unit(0.1, "cm"))) +
annotate("text", x = 3, y = 25, label = "Most underpriced hotels", size = 3) +
theme_bg() +
theme(axis.text.x = element_text(size = 9)) +
theme(axis.text.y = element_text(size = 9)) +
theme(axis.title.x = element_text(size = 9)) +
theme(axis.title.y = element_text(size = 9))
p3
# CASE STUDY: Finding a Good Deal among Hotels with Nonlinear Function
# calculating log price
hotels$lnprice <- log(hotels$price)
# creating new distance variable with all values less than 0.05 normalized to 0.05
hotels$distance2 <- hotels$distance
hotels$distance2[hotels$distance2 < 0.05] <- 0.05
# creating log distance
hotels$lndistance <- log(hotels$distance2)
# describe price and ln price
summary(hotels$price)
summary(hotels$lnprice)
# running linear regressions on non-log/log variables
reg1 <- lm(price ~ distance, data = hotels)
summary(reg1)
reg2 <- lm(price ~ lndistance, data = hotels)
summary(reg2)
reg3 <- lm(lnprice ~ distance, data = hotels)
summary(reg3)
reg4 <- lm(lnprice ~ lndistance, data = hotels)
summary(reg4)
# plotting LEVEL-LEVEL LINEAR REGRESSION
p1 <- ggplot(data = hotels, aes(x = distance, y = price)) +
geom_point_da() +
geom_smooth_da(method = "lm") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "Distance to city center (miles)", y = "Price (US dollars)") +
theme_bg()
p1
# plotting LOG-LEVEL LINEAR REGRESSION (scatterplot more symmetrically distributed around the regression line)
p2 <- ggplot(data = hotels, aes(x = distance, y = lnprice)) +
geom_point_da() +
geom_smooth_da(method = "lm") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 7), breaks = seq(0, 7, by = 1)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(3.5, 6), breaks = seq(3.5, 6, by = 0.50)) +
labs(x = "Distance to city center (miles)", y = "ln(price, US dollars)") +
theme_bg()
p2
p1 | p2
# plotting LEVEL-LOG LINEAR REGRESSION
p3 <- ggplot(data = hotels, aes(x = lndistance, y = price)) +
geom_point_da() +
geom_smooth_da(method = "lm") +
expand_limits(x = 0.01, y = 0.01) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(0, 400), breaks = seq(0, 400, by = 50)) +
labs(x = "ln(distance to city center, miles)", y = "Price (US dollars)") +
theme_bg()
p3
# plotting LOG-LOG LINEAR REGRESSION
p4 <- ggplot(data = hotels, aes(x = lndistance, y = lnprice)) +
geom_point_da() +
geom_smooth_da(method = "lm") +
expand_limits(x = 0.01, y = 0.01) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(3.5, 6), breaks = seq(3.5, 6, by = 0.50)) +
labs(x = "ln(distance to city center, miles)", y = "ln(price, US dollars)") +
theme_bg()
p4
p3 | p4
# CASE STUDY: How is Life Expectancy Related to the Average Income of a Country?
# load data
xc <- read_csv("input/worldbank-lifeexpectancy.csv")
# select year
xc <- xc |> filter(year == 2017)
# GDP total, log
xc <- xc |>
mutate(gdptot = gdppc * population) |>
mutate(lngdppc = log(gdppc)) |>
mutate(lngdptot = log(gdptot))
xc |>
dplyr::select(lifeexp, gdppc, gdptot, lngdppc, lngdptot) |>
summary()
# plotting the distribution of GDP per capita (level and log)
# level
p1 <- ggplot(
data = xc,
aes(x = gdppc, y = (..count..) / sum(..count..))
) +
geom_histogram(
binwidth = 3, boundary = 0, closed = "left",
color = color.outline, fill = color[1], size = 0.25, alpha = 0.8, show.legend = F, na.rm = TRUE
) +
labs(x = "GDP per capita (thousand US dollars)", y = "Percent") +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 120), breaks = seq(0, 120, by = 15)) +
scale_y_continuous(expand = c(0.0, 0.0), limits = c(0, 0.2), breaks = seq(0, 0.20, by = 0.04), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p1
# log
p2 <- ggplot(
data = xc,
aes(x = lngdppc, y = (..count..) / sum(..count..))
) +
geom_histogram(
binwidth = 0.2, boundary = 0, closed = "left",
color = color.outline, fill = color[1], size = 0.25, alpha = 0.8, show.legend = F, na.rm = TRUE
) +
labs(x = "ln(GDP per capita, thousand US dollars)", y = "Percent") +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 5), breaks = seq(0, 5, by = 1)) +
scale_y_continuous(expand = c(0.0, 0.0), limits = c(0, 0.1), breaks = seq(0, 0.10, by = 0.02), labels = scales::percent_format(accuracy = 1)) +
theme_bg()
p2
p1 | p2
# running linear regression
reg1 <- lm(lifeexp ~ gdppc, data = xc)
summary(reg1)
# plotting LEVEL-LEVEL REGRESSION
p3 <- ggplot(
data = xc,
aes(x = gdppc, y = lifeexp)
) +
geom_point_da() +
geom_smooth_da(method = "lm") +
coord_cartesian(xlim = c(0, 120), ylim = c(50, 100)) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 120), breaks = seq(0, 120, by = 20)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 100, by = 5)) +
labs(x = "GDP per capita (thousand US dollars)", y = "Life expectancy  (years)") +
theme_bg()
p3
# running linear regression log per capita
reg2 <- lm(lifeexp ~ lngdppc, data = xc)
summary(reg2)
# plotting life expectancy and GDP log per capita
p4 <- ggplot(
data = xc,
aes(x = lngdppc, y = lifeexp)
) +
geom_point_da() +
geom_smooth_da(method = "lm") +
coord_cartesian(xlim = c(-0.5, 4.8), ylim = c(50, 85)) +
scale_x_continuous(breaks = seq(-0.5, 4.5, by = 0.5)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 85, by = 5)) +
labs(x = "ln(GDP per capita, thousand US dollars) ", y = "Life expectancy  (years)") +
theme_bg()
p4
# plotting life expectancy and GDP log per capita (in scale)
p5 <- ggplot(
data = xc,
aes(x = gdppc, y = lifeexp)
) +
geom_point_da() +
geom_smooth_da(method = "lm") +
coord_cartesian(ylim = c(50, 85)) +
scale_x_continuous(trans = log_trans(), breaks = c(0.1, 0.5, 1, 2, 5, 10, 20, 50, 100)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 85, by = 5)) +
labs(x = "GDP per capita, thousand US dollars (ln scale) ", y = "Life expectancy  (years)") +
theme_bg()
p5
p4 | p5
# running linear regression total GDP
reg3 <- lm(lifeexp ~ gdptot, data=xc)
summary(reg3)
# plotting LEVEL-LEVEL REGRESSION (total GDP)
p6 <- ggplot(
data = xc,
aes(x = gdptot, y = lifeexp)
) +
geom_point_da() +
geom_smooth_da(method = "lm") +
coord_cartesian(xlim = c(0, 24000), ylim = c(50, 85)) +
expand_limits(x = 0.01, y = 0.01) +
scale_x_continuous(expand = c(0.01, 0.01), limits = c(0, 24000), breaks = seq(0, 24000, by = 4000)) +
scale_y_continuous(expand = c(0.01, 0.01), limits = c(50, 85), breaks = seq(50, 85, by = 5)) +
labs(x = "Total GDP  (billion US dollars)", y = "Life expectancy  (years)") +
theme_bg()
p6
# running linear regression log total GDP
reg4 <- lm(lifeexp ~ lngdptot, data = xc)
summary(reg4)
# plotting LEVEL-LOG REGRESSION (total GDP)
p7 <- ggplot(
data = xc,
aes(x = gdptot, y = lifeexp)
) +
geom_point_da() +
geom_smooth_da(method = "lm") +
coord_cartesian(ylim = c(50, 85)) +
scale_x_continuous(trans = log_trans(), breaks = c(1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 10000)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = c(50, 55, 60, 65, 70, 75, 80, 85)) +
labs(x = "Total GDP (in ln scale))", y = "Life expectancy  (years)") +
theme_bg()
p7
# lintr::lint("main.Rmd", linters =
#               lintr::with_defaults(
#                 commented_code_linter = NULL,
#                 trailing_whitespace_linter = NULL
#                 )
#             )
# if you have additional scripts and want them to be linted too, add them here
# lintr::lint("scripts/my_script.R")
styler:::style_selection()
# creating the log
cutoff_ln <- log(cutoff)
# setting the knot (GDP per capita over 50 000 dollars)
cutoff <- 50
# creating the log
cutoff_ln <- log(cutoff)
cutoff_ln
styler:::style_selection()
reg5 <- lm(lifeexp ~ lspline(lngdppc, cutoff_ln), data = xc)
install.packages("lspline")
library(lspline)
reg5 <- lm(lifeexp ~ lspline(lngdppc, cutoff_ln), data = xc)
summary(reg4)
styler:::style_selection()
coeftest(reg5)
install.packages("lmtest")
library(lmtest)
coeftest(reg5)
xc$e3 <- resid(reg5)
xc$sppred <- predict(lm(lifeexp ~ lspline(lngdppc, cutoff_ln), data = xc))
head(xc$sppred)
# running piecewise linear spline regression on log
reg5 <- lm(lifeexp ~ lspline::lspline(lngdppc, cutoff_ln), data = xc)
lmtest::coeftest(reg5)
lmtest::coeftest(reg5)
xc$e3 <- resid(reg5)
xc$sppred <- predict(lm(lifeexp ~ lspline::lspline(lngdppc, cutoff_ln), data = xc))
head(xc$e3)
help("predict")
xc$sppred <- predict(lm(lifeexp ~ lspline::lspline(lngdppc, cutoff_ln), data = xc))
xc$sppred
styler:::style_selection()
p1 <- ggplot(
data = xc,
aes(x = gdppc, y = lifeexp)
) +
geom_point_da() +
geom_line(data = xc, aes(x = gdppc, y = sppred), color = color[2], size = 0.7) +
geom_vline(xintercept = cutoff, color = color[3], size = 0.5, linetype = "dotted") +
coord_cartesian(ylim = c(50, 85)) +
scale_x_continuous(trans = log_trans(), breaks = c(0.1, 0.5, 1, 2, 5, 10, 20, 50, 100)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 85, by = 5)) +
labs(x = "GDP per capita, thousand US dollars (ln scale) ", y = "Life expectancy  (years)") +
theme_bg()
p1
summary(reg4)
# running test of coefficients
lmtest::coeftest(reg5)
summary(reg4)
# running test of coefficients to check differences in slope for the different segments (5.5 vs -0.3)
lmtest::coeftest(reg5)
summary(reg4)
summary(reg5)
styler:::style_selection()
# QUADRATIC IN LEVEL-LOG REGRESSION
# calculating the quadratic function
xc$lngdppc_sq <- xc$lngdppc^2
reg6 <- lm(lifeexp ~ lngdppc + lngdppc_sq, data = xc)
summary(reg6)
# calculating the residuals and creating a new variable
xc$e6 <- resid(reg6)
help("resid")
styler:::style_selection()
p2 <- ggplot(data = xc, aes(x = lngdppc, y = lifeexp)) +
geom_point_da() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = color[2], se = F, size = 0.7) +
coord_cartesian(xlim = c(-1, 5), ylim = c(50, 90)) +
scale_x_continuous(breaks = seq(-1, 5, by = 0.5)) +
scale_y_continuous(breaks = seq(50, 90, by = 5)) +
labs(x = "ln(GDP per capita, thousand US dollars)", y = "Life expectancy  (years)") +
theme_bg()
p2
p1 | p2
summary(reg6)
p2
styler:::style_selection()
p3 <- ggplot(data = xc, aes(x = gdppc, y = lifeexp)) +
geom_point_da() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = color[2], se = F, size = 0.7) +
coord_cartesian(ylim = c(50, 85)) +
scale_x_continuous(trans = log_trans(), breaks = c(0.1, 0.5, 1, 2, 5, 10, 20, 50, 100)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 85, by = 5)) +
labs(x = "GDP per capita, thousand US dollars (ln scale) ", y = "Life expectancy  (years)") +
theme_bg()
p3
p2 <- ggplot(data = xc, aes(x = gdppc, y = lifeexp)) +
geom_point_da() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = color[2], se = F, size = 0.7) +
coord_cartesian(ylim = c(50, 85)) +
scale_x_continuous(trans = log_trans(), breaks = c(0.1, 0.5, 1, 2, 5, 10, 20, 50, 100)) +
scale_y_continuous(expand = c(0.01, 0.01), breaks = seq(50, 85, by = 5)) +
labs(x = "GDP per capita, thousand US dollars (ln scale) ", y = "Life expectancy  (years)") +
theme_bg()
p2
# plotting a scatterplot with the polynomial (quadratic) nonlinear regression (ln units)
p3 <- ggplot(data = xc, aes(x = lngdppc, y = lifeexp)) +
geom_point_da() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = color[2], se = F, size = 0.7) +
coord_cartesian(xlim = c(-1, 5), ylim = c(50, 90)) +
scale_x_continuous(breaks = seq(-1, 5, by = 0.5)) +
scale_y_continuous(breaks = seq(50, 90, by = 5)) +
labs(x = "ln(GDP per capita, thousand US dollars)", y = "Life expectancy  (years)") +
theme_bg()
p3
p1 | p2
# calculating the residuals and creating a new variable
xc$e6 <- resid(reg6)
summary(reg6)
styler:::style_selection()
View(xc)
summary(reg2)
p4 | p5
